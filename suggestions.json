{
    "html": [
        { "label": "<!DOCTYPE html>", "insert": "<!DOCTYPE html>" },
        { "label": "<html></html>", "insert": "<html>\n\t\n</html>" },
        { "label": "<head></head>", "insert": "<head>\n\t<title></title>\n</head>" },
        { "label": "<body></body>", "insert": "<body>\n\t\n</body>" },
        { "label": "<h1></h1>", "insert": "<h1></h1>" },
        { "label": "<p></p>", "insert": "<p></p>" },
        { "label": "<div></div>", "insert": "<div>\n\t\n</div>" },
        { "label": "<span></span>", "insert": "<span></span>" },
        { "label": "<img>", "insert": "<img src=\"\" alt=\"\">" },
        { "label": "<a></a>", "insert": "<a href=\"\"></a>" },
        { "label": "<ul></ul>", "insert": "<ul>\n\t<li></li>\n</ul>" },
        { "label": "<ol></ol>", "insert": "<ol>\n\t<li></li>\n</ol>" },
        { "label": "<li></li>", "insert": "<li></li>" },
        { "label": "<table></table>", "insert": "<table>\n\t<tr>\n\t\t<td></td>\n\t</tr>\n</table>" },
        { "label": "<form></form>", "insert": "<form action=\"\" method=\"\">\n\t\n</form>" },
        { "label": "<input>", "insert": "<input type=\"\" name=\"\" id=\"\">" },
        { "label": "<button></button>", "insert": "<button type=\"button\"></button>" },
        { "label": "<script></script>", "insert": "<script>\n\t\n</script>" },
        { "label": "<style></style>", "insert": "<style>\n\t\n</style>" },
        { "label": "<meta viewport>", "insert": "<meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">" },
        { "label": "<link stylesheet>", "insert": "<link rel=\"stylesheet\" href=\"\">" },
        { "label": "<h2></h2>", "insert": "<h2></h2>" },
        { "label": "<h3></h3>", "insert": "<h3></h3>" },
        { "label": "<h4></h4>", "insert": "<h4></h4>" },
        { "label": "<h5></h5>", "insert": "<h5></h5>" },
        { "label": "<h6></h6>", "insert": "<h6></h6>" },
        { "label": "<strong></strong>", "insert": "<strong></strong>" },
        { "label": "<em></em>", "insert": "<em></em>" },
        { "label": "<br>", "insert": "<br>" },
        { "label": "<hr>", "insert": "<hr>" },
        { "label": "<blockquote></blockquote>", "insert": "<blockquote>\n\t\n</blockquote>" },
        { "label": "<code></code>", "insert": "<code></code>" },
        { "label": "<pre></pre>", "insert": "<pre>\n\t\n</pre>" },
        { "label": "<textarea></textarea>", "insert": "<textarea name=\"\" id=\"\" rows=\"4\" cols=\"50\"></textarea>" },
        { "label": "<select></select>", "insert": "<select name=\"\" id=\"\">\n\t<option value=\"\"></option>\n</select>" },
        { "label": "<option></option>", "insert": "<option value=\"\"></option>" },
        { "label": "<label></label>", "insert": "<label for=\"\"></label>" },
        { "label": "<fieldset></fieldset>", "insert": "<fieldset>\n\t<legend></legend>\n\t\n</fieldset>" },
        { "label": "<iframe></iframe>", "insert": "<iframe src=\"\" width=\"\" height=\"\"></iframe>" },
        { "label": "<video></video>", "insert": "<video controls>\n\t<source src=\"\" type=\"video/mp4\">\n</video>" },
        { "label": "<audio></audio>", "insert": "<audio controls>\n\t<source src=\"\" type=\"audio/mp3\">\n</audio>" },
        { "label": "<canvas></canvas>", "insert": "<canvas id=\"\" width=\"\" height=\"\"></canvas>" },
        { "label": "<svg></svg>", "insert": "<svg width=\"\" height=\"\">\n\t\n</svg>" },
        { "label": "<header></header>", "insert": "<header>\n\t\n</header>" },
        { "label": "<nav></nav>", "insert": "<nav>\n\t\n</nav>" },
        { "label": "<main></main>", "insert": "<main>\n\t\n</main>" },
        { "label": "<section></section>", "insert": "<section>\n\t\n</section>" },
        { "label": "<article></article>", "insert": "<article>\n\t\n</article>" },
        { "label": "<aside></aside>", "insert": "<aside>\n\t\n</aside>" },
        { "label": "<footer></footer>", "insert": "<footer>\n\t\n</footer>" },
        { "label": "<figure></figure>", "insert": "<figure>\n\t<img src=\"\" alt=\"\">\n\t<figcaption></figcaption>\n</figure>" },
        { "label": "<details></details>", "insert": "<details>\n\t<summary></summary>\n\t\n</details>" },
        { "label": "<progress></progress>", "insert": "<progress value=\"\" max=\"\"></progress>" },
        { "label": "<meter></meter>", "insert": "<meter value=\"\" min=\"\" max=\"\"></meter>" },
        { "label": "<datalist></datalist>", "insert": "<datalist id=\"\">\n\t<option value=\"\">\n</datalist>" },
        { "label": "<output></output>", "insert": "<output name=\"\" for=\"\"></output>" },
        { "label": "<meta charset>", "insert": "<meta charset=\"UTF-8\">" },
        { "label": "<meta description>", "insert": "<meta name=\"description\" content=\"\">" },
        { "label": "<meta keywords>", "insert": "<meta name=\"keywords\" content=\"\">" },
        { "label": "<link icon>", "insert": "<link rel=\"icon\" href=\"\">" },
        { "label": "<script src>", "insert": "<script src=\"\"></script>" },
        { "label": "HTML5 template", "insert": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n\t<meta charset=\"UTF-8\">\n\t<meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n\t<title>Document</title>\n</head>\n<body>\n\t\n</body>\n</html>" }
    ],
    "js": [
        { "label": "console.log()", "insert": "console.log();" },
        { "label": "const", "insert": "const " },
        { "label": "let", "insert": "let " },
        { "label": "function", "insert": "function " },
        { "label": "document.getElementById()", "insert": "document.getElementById('');" },
        { "label": "addEventListener()", "insert": "addEventListener('', () => {\n\t\n});" },
        { "label": "arrow function", "insert": "const functionName = () => {\n\t\n};" },
        { "label": "if statement", "insert": "if () {\n\t\n}" },
        { "label": "if...else", "insert": "if () {\n\t\n} else {\n\t\n}" },
        { "label": "for loop", "insert": "for (let i = 0; i < ; i++) {\n\t\n}" },
        { "label": "while loop", "insert": "while () {\n\t\n}" },
        { "label": "forEach", "insert": ".forEach((item) => {\n\t\n});" },
        { "label": "map", "insert": ".map((item) => {\n\treturn ;\n});" },
        { "label": "filter", "insert": ".filter((item) => {\n\treturn ;\n});" },
        { "label": "try...catch", "insert": "try {\n\t\n} catch (error) {\n\tconsole.error(error);\n}" },
        { "label": "document.querySelector()", "insert": "document.querySelector('');" },
        { "label": "document.querySelectorAll()", "insert": "document.querySelectorAll('');" },
        { "label": "setTimeout", "insert": "setTimeout(() => {\n\t\n}, 1000);" },
        { "label": "setInterval", "insert": "setInterval(() => {\n\t\n}, 1000);" },
        { "label": "fetch API", "insert": "fetch('')\n\t.then(response => response.json())\n\t.then(data => {\n\t\tconsole.log(data);\n\t});" },
        { "label": "async function", "insert": "async function functionName() {\n\ttry {\n\t\tconst response = await fetch('');\n\t\tconst data = await response.json();\n\t\treturn data;\n\t} catch (error) {\n\t\tconsole.error(error);\n\t}\n}" },
        { "label": "class", "insert": "class ClassName {\n\tconstructor() {\n\t\t\n\t}\n\n\tmethod() {\n\t\t\n\t}\n}" },
        { "label": "switch statement", "insert": "switch () {\n\tcase :\n\t\tbreak;\n\tdefault:\n\t\tbreak;\n}" },
        { "label": "var", "insert": "var " },
        { "label": "return", "insert": "return " },
        { "label": "break", "insert": "break;" },
        { "label": "continue", "insert": "continue;" },
        { "label": "do...while", "insert": "do {\n\t\n} while ();" },
        { "label": "for...in", "insert": "for (let key in object) {\n\t\n}" },
        { "label": "for...of", "insert": "for (let item of iterable) {\n\t\n}" },
        { "label": "reduce", "insert": ".reduce((acc, current) => {\n\treturn acc + current;\n}, 0);" },
        { "label": "find", "insert": ".find((item) => {\n\treturn ;\n});" },
        { "label": "findIndex", "insert": ".findIndex((item) => {\n\treturn ;\n});" },
        { "label": "some", "insert": ".some((item) => {\n\treturn ;\n});" },
        { "label": "every", "insert": ".every((item) => {\n\treturn ;\n});" },
        { "label": "sort", "insert": ".sort((a, b) => a - b);" },
        { "label": "includes", "insert": ".includes();" },
        { "label": "indexOf", "insert": ".indexOf();" },
        { "label": "slice", "insert": ".slice(, );" },
        { "label": "splice", "insert": ".splice(, , );" },
        { "label": "push", "insert": ".push();" },
        { "label": "pop", "insert": ".pop();" },
        { "label": "shift", "insert": ".shift();" },
        { "label": "unshift", "insert": ".unshift();" },
        { "label": "join", "insert": ".join('');" },
        { "label": "split", "insert": ".split('');" },
        { "label": "replace", "insert": ".replace('', '');" },
        { "label": "toUpperCase", "insert": ".toUpperCase();" },
        { "label": "toLowerCase", "insert": ".toLowerCase();" },
        { "label": "trim", "insert": ".trim();" },
        { "label": "parseInt", "insert": "parseInt();" },
        { "label": "parseFloat", "insert": "parseFloat();" },
        { "label": "JSON.stringify", "insert": "JSON.stringify();" },
        { "label": "JSON.parse", "insert": "JSON.parse();" },
        { "label": "Math.random", "insert": "Math.random();" },
        { "label": "Math.floor", "insert": "Math.floor();" },
        { "label": "Math.ceil", "insert": "Math.ceil();" },
        { "label": "Math.round", "insert": "Math.round();" },
        { "label": "Math.max", "insert": "Math.max();" },
        { "label": "Math.min", "insert": "Math.min();" },
        { "label": "Date", "insert": "new Date();" },
        { "label": "Array", "insert": "new Array();" },
        { "label": "Object", "insert": "new Object();" },
        { "label": "RegExp", "insert": "new RegExp('');" },
        { "label": "typeof", "insert": "typeof " },
        { "label": "instanceof", "insert": " instanceof " },
        { "label": "delete", "insert": "delete ;" },
        { "label": "in operator", "insert": " in " },
        { "label": "conditional operator", "insert": " ? : ;" },
        { "label": "strict equality", "insert": " === " },
        { "label": "strict inequality", "insert": " !== " },
        { "label": "logical AND", "insert": " && " },
        { "label": "logical OR", "insert": " || " },
        { "label": "logical NOT", "insert": "!" },
        { "label": "nullish coalescing", "insert": " ?? " },
        { "label": "optional chaining", "insert": "?.;" },
        { "label": "spread operator", "insert": "...array" },
        { "label": "rest parameters", "insert": "function func(...args) {\n\t\n}" },
        { "label": "destructuring array", "insert": "const [a, b] = array;" },
        { "label": "destructuring object", "insert": "const {key} = object;" },
        { "label": "template literal", "insert": "`${}`;" },
        { "label": "Promise", "insert": "new Promise((resolve, reject) => {\n\t\n});" },
        { "label": "async/await", "insert": "const result = await promise;" },
        { "label": "export", "insert": "export " },
        { "label": "import", "insert": "import  from '';" },
        { "label": "export default", "insert": "export default " },
        { "label": "import default", "insert": "import name from '';" },
        { "label": "clearTimeout", "insert": "clearTimeout();" },
        { "label": "clearInterval", "insert": "clearInterval();" },
        { "label": "console.error", "insert": "console.error();" },
        { "label": "console.warn", "insert": "console.warn();" },
        { "label": "console.table", "insert": "console.table();" },
        { "label": "alert", "insert": "alert('');" },
        { "label": "confirm", "insert": "confirm('');" },
        { "label": "prompt", "insert": "prompt('');" },
        { "label": "window.location", "insert": "window.location.href = '';" },
        { "label": "localStorage.setItem", "insert": "localStorage.setItem('', '');" },
        { "label": "localStorage.getItem", "insert": "localStorage.getItem('');" },
        { "label": "sessionStorage.setItem", "insert": "sessionStorage.setItem('', '');" },
        { "label": "sessionStorage.getItem", "insert": "sessionStorage.getItem('');" },
        { "label": "createElement", "insert": "document.createElement('');" },
        { "label": "appendChild", "insert": ".appendChild();" },
        { "label": "removeChild", "insert": ".removeChild();" },
        { "label": "setAttribute", "insert": ".setAttribute('', '');" },
        { "label": "getAttribute", "insert": ".getAttribute('');" },
        { "label": "classList.add", "insert": ".classList.add('');" },
        { "label": "classList.remove", "insert": ".classList.remove('');" },
        { "label": "classList.toggle", "insert": ".classList.toggle('');" },
        { "label": "innerHTML", "insert": ".innerHTML = '';" },
        { "label": "innerText", "insert": ".innerText = '';" },
        { "label": "textContent", "insert": ".textContent = '';" },
        { "label": "style property", "insert": ".style. = '';" },
        { "label": "preventDefault", "insert": "event.preventDefault();" },
        { "label": "stopPropagation", "insert": "event.stopPropagation();" },
        { "label": "event.target", "insert": "event.target;" },
        { "label": "DOMContentLoaded", "insert": "document.addEventListener('DOMContentLoaded', () => {\n\t\n});" }
    ],
    "css": [
        { "label": "color: ;", "insert": "color: " },
        { "label": "background-color: ;", "insert": "background-color: " },
        { "label": "font-size: ;", "insert": "font-size: " },
        { "label": "margin: ;", "insert": "margin: " },
        { "label": "padding: ;", "insert": "padding: " },
        { "label": "display: flex;", "insert": "display: flex;" },
        { "label": "display: grid;", "insert": "display: grid;" },
        { "label": "justify-content: ;", "insert": "justify-content: " },
        { "label": "align-items: ;", "insert": "align-items: " },
        { "label": "width: ;", "insert": "width: " },
        { "label": "height: ;", "insert": "height: " },
        { "label": "border: ;", "insert": "border: " },
        { "label": "border-radius: ;", "insert": "border-radius: " },
        { "label": "position: ;", "insert": "position: " },
        { "label": "top: ;", "insert": "top: " },
        { "label": "left: ;", "insert": "left: " },
        { "label": "right: ;", "insert": "right: " },
        { "label": "bottom: ;", "insert": "bottom: " },
        { "label": "z-index: ;", "insert": "z-index: " },
        { "label": "opacity: ;", "insert": "opacity: " },
        { "label": "transition: ;", "insert": "transition: " },
        { "label": "transform: ;", "insert": "transform: " },
        { "label": "box-shadow: ;", "insert": "box-shadow: " },
        { "label": "text-align: ;", "insert": "text-align: " },
        { "label": "font-family: ;", "insert": "font-family: " },
        { "label": "font-weight: ;", "insert": "font-weight: " },
        { "label": "line-height: ;", "insert": "line-height: " },
        { "label": "overflow: ;", "insert": "overflow: " },
        { "label": "cursor: ;", "insert": "cursor: " },
        { "label": "hover effect", "insert": ":hover {\n\t\n}" },
        { "label": "media query", "insert": "@media (max-width: 768px) {\n\t\n}" },
        { "label": "flexbox container", "insert": "display: flex;\njustify-content: center;\nalign-items: center;" },
        { "label": "grid container", "insert": "display: grid;\ngrid-template-columns: repeat(3, 1fr);\ngap: 1rem;" },
        { "label": "background: ;", "insert": "background: " },
        { "label": "background-image: ;", "insert": "background-image: " },
        { "label": "background-size: ;", "insert": "background-size: " },
        { "label": "background-position: ;", "insert": "background-position: " },
        { "label": "background-repeat: ;", "insert": "background-repeat: " },
        { "label": "background-attachment: ;", "insert": "background-attachment: " },
        { "label": "display: block;", "insert": "display: block;" },
        { "label": "display: inline;", "insert": "display: inline;" },
        { "label": "display: inline-block;", "insert": "display: inline-block;" },
        { "label": "display: none;", "insert": "display: none;" },
        { "label": "visibility: ;", "insert": "visibility: " },
        { "label": "float: ;", "insert": "float: " },
        { "label": "clear: ;", "insert": "clear: " },
        { "label": "vertical-align: ;", "insert": "vertical-align: " },
        { "label": "text-decoration: ;", "insert": "text-decoration: " },
        { "label": "text-transform: ;", "insert": "text-transform: " },
        { "label": "letter-spacing: ;", "insert": "letter-spacing: " },
        { "label": "word-spacing: ;", "insert": "word-spacing: " },
        { "label": "white-space: ;", "insert": "white-space: " },
        { "label": "text-indent: ;", "insert": "text-indent: " },
        { "label": "text-shadow: ;", "insert": "text-shadow: " },
        { "label": "list-style: ;", "insert": "list-style: " },
        { "label": "list-style-type: ;", "insert": "list-style-type: " },
        { "label": "list-style-position: ;", "insert": "list-style-position: " },
        { "label": "list-style-image: ;", "insert": "list-style-image: " },
        { "label": "border-top: ;", "insert": "border-top: " },
        { "label": "border-right: ;", "insert": "border-right: " },
        { "label": "border-bottom: ;", "insert": "border-bottom: " },
        { "label": "border-left: ;", "insert": "border-left: " },
        { "label": "border-width: ;", "insert": "border-width: " },
        { "label": "border-style: ;", "insert": "border-style: " },
        { "label": "border-color: ;", "insert": "border-color: " },
        { "label": "outline: ;", "insert": "outline: " },
        { "label": "outline-width: ;", "insert": "outline-width: " },
        { "label": "outline-style: ;", "insert": "outline-style: " },
        { "label": "outline-color: ;", "insert": "outline-color: " },
        { "label": "margin-top: ;", "insert": "margin-top: " },
        { "label": "margin-right: ;", "insert": "margin-right: " },
        { "label": "margin-bottom: ;", "insert": "margin-bottom: " },
        { "label": "margin-left: ;", "insert": "margin-left: " },
        { "label": "padding-top: ;", "insert": "padding-top: " },
        { "label": "padding-right: ;", "insert": "padding-right: " },
        { "label": "padding-bottom: ;", "insert": "padding-bottom: " },
        { "label": "padding-left: ;", "insert": "padding-left: " },
        { "label": "max-width: ;", "insert": "max-width: " },
        { "label": "max-height: ;", "insert": "max-height: " },
        { "label": "min-width: ;", "insert": "min-width: " },
        { "label": "min-height: ;", "insert": "min-height: " },
        { "label": "box-sizing: ;", "insert": "box-sizing: " },
        { "label": "resize: ;", "insert": "resize: " },
        { "label": "content: ;", "insert": "content: " },
        { "label": "counter-reset: ;", "insert": "counter-reset: " },
        { "label": "counter-increment: ;", "insert": "counter-increment: " },
        { "label": "quotes: ;", "insert": "quotes: " },
        { "label": "flex-direction: ;", "insert": "flex-direction: " },
        { "label": "flex-wrap: ;", "insert": "flex-wrap: " },
        { "label": "flex-flow: ;", "insert": "flex-flow: " },
        { "label": "justify-content: center;", "insert": "justify-content: center;" },
        { "label": "align-items: center;", "insert": "align-items: center;" },
        { "label": "align-self: ;", "insert": "align-self: " },
        { "label": "flex-grow: ;", "insert": "flex-grow: " },
        { "label": "flex-shrink: ;", "insert": "flex-shrink: " },
        { "label": "flex-basis: ;", "insert": "flex-basis: " },
        { "label": "flex: ;", "insert": "flex: " },
        { "label": "order: ;", "insert": "order: " },
        { "label": "grid-template-columns: ;", "insert": "grid-template-columns: " },
        { "label": "grid-template-rows: ;", "insert": "grid-template-rows: " },
        { "label": "grid-template-areas: ;", "insert": "grid-template-areas: " },
        { "label": "grid-template: ;", "insert": "grid-template: " },
        { "label": "grid-column-gap: ;", "insert": "grid-column-gap: " },
        { "label": "grid-row-gap: ;", "insert": "grid-row-gap: " },
        { "label": "grid-gap: ;", "insert": "grid-gap: " },
        { "label": "gap: ;", "insert": "gap: " },
        { "label": "grid-column-start: ;", "insert": "grid-column-start: " },
        { "label": "grid-column-end: ;", "insert": "grid-column-end: " },
        { "label": "grid-row-start: ;", "insert": "grid-row-start: " },
        { "label": "grid-row-end: ;", "insert": "grid-row-end: " },
        { "label": "grid-column: ;", "insert": "grid-column: " },
        { "label": "grid-row: ;", "insert": "grid-row: " },
        { "label": "grid-area: ;", "insert": "grid-area: " },
        { "label": "justify-self: ;", "insert": "justify-self: " },
        { "label": "align-content: ;", "insert": "align-content: " },
        { "label": "place-items: ;", "insert": "place-items: " },
        { "label": "place-content: ;", "insert": "place-content: " },
        { "label": "place-self: ;", "insert": "place-self: " },
        { "label": "animation: ;", "insert": "animation: " },
        { "label": "animation-name: ;", "insert": "animation-name: " },
        { "label": "animation-duration: ;", "insert": "animation-duration: " },
        { "label": "animation-timing-function: ;", "insert": "animation-timing-function: " },
        { "label": "animation-delay: ;", "insert": "animation-delay: " },
        { "label": "animation-iteration-count: ;", "insert": "animation-iteration-count: " },
        { "label": "animation-direction: ;", "insert": "animation-direction: " },
        { "label": "animation-fill-mode: ;", "insert": "animation-fill-mode: " },
        { "label": "animation-play-state: ;", "insert": "animation-play-state: " },
        { "label": "@keyframes", "insert": "@keyframes animationName {\n\t0% {\n\t\t\n\t}\n\t100% {\n\t\t\n\t}\n}" },
        { "label": "transition-property: ;", "insert": "transition-property: " },
        { "label": "transition-duration: ;", "insert": "transition-duration: " },
        { "label": "transition-timing-function: ;", "insert": "transition-timing-function: " },
        { "label": "transition-delay: ;", "insert": "transition-delay: " },
        { "label": "transform-origin: ;", "insert": "transform-origin: " },
        { "label": "transform-style: ;", "insert": "transform-style: " },
        { "label": "perspective: ;", "insert": "perspective: " },
        { "label": "perspective-origin: ;", "insert": "perspective-origin: " },
        { "label": "backface-visibility: ;", "insert": "backface-visibility: " },
        { "label": "filter: ;", "insert": "filter: " },
        { "label": "backdrop-filter: ;", "insert": "backdrop-filter: " },
        { "label": "clip-path: ;", "insert": "clip-path: " },
        { "label": "mask: ;", "insert": "mask: " },
        { "label": ":active", "insert": ":active {\n\t\n}" },
        { "label": ":focus", "insert": ":focus {\n\t\n}" },
        { "label": ":visited", "insert": ":visited {\n\t\n}" },
        { "label": ":first-child", "insert": ":first-child {\n\t\n}" },
        { "label": ":last-child", "insert": ":last-child {\n\t\n}" },
        { "label": ":nth-child()", "insert": ":nth-child() {\n\t\n}" },
        { "label": ":nth-of-type()", "insert": ":nth-of-type() {\n\t\n}" },
        { "label": ":before", "insert": ":before {\n\tcontent: '';\n\t\n}" },
        { "label": ":after", "insert": ":after {\n\tcontent: '';\n\t\n}" },
        { "label": "::placeholder", "insert": "::placeholder {\n\t\n}" },
        { "label": "::selection", "insert": "::selection {\n\t\n}" },
        { "label": "::first-line", "insert": "::first-line {\n\t\n}" },
        { "label": "::first-letter", "insert": "::first-letter {\n\t\n}" },
        { "label": "@import", "insert": "@import url('');" },
        { "label": "@font-face", "insert": "@font-face {\n\tfont-family: '';\n\tsrc: url('');\n}" },
        { "label": "@media print", "insert": "@media print {\n\t\n}" },
        { "label": "@media screen", "insert": "@media screen and (max-width: 768px) {\n\t\n}" },
        { "label": "@supports", "insert": "@supports (property: value) {\n\t\n}" },
        { "label": "CSS Grid Layout", "insert": "display: grid;\ngrid-template-columns: repeat(auto-fit, minmax(250px, 1fr));\ngap: 1rem;" },
        { "label": "Flexbox Center", "insert": "display: flex;\njustify-content: center;\nalign-items: center;\nheight: 100vh;" },
        { "label": "CSS Reset", "insert": "* {\n\tmargin: 0;\n\tpadding: 0;\n\tbox-sizing: border-box;\n}" }
    ],
    "py": [
        { "label": "print()", "insert": "print()" },
        { "label": "def function_name():", "insert": "def function_name():\n    pass" },
        { "label": "if __name__ == \"__main__\":", "insert": "if __name__ == \"__main__\":\n    " },
        { "label": "import", "insert": "import " },
        { "label": "from module import", "insert": "from  import " },
        { "label": "for i in range():", "insert": "for i in range():\n    " },
        { "label": "class ClassName:", "insert": "class ClassName:\n    def __init__(self):\n        pass" },
        { "label": "try...except", "insert": "try:\n    \nexcept Exception as e:\n    print(e)" },
        { "label": "if statement", "insert": "if :\n    " },
        { "label": "if...else", "insert": "if :\n    \nelse:\n    " },
        { "label": "elif", "insert": "elif :\n    " },
        { "label": "for loop", "insert": "for item in :\n    " },
        { "label": "while loop", "insert": "while :\n    " },
        { "label": "list comprehension", "insert": "[item for item in  if ]" },
        { "label": "dictionary comprehension", "insert": "{key: value for key, value in .items()}" },
        { "label": "with statement", "insert": "with open('', 'r') as file:\n    " },
        { "label": "lambda function", "insert": "lambda x: " },
        { "label": "def with parameters", "insert": "def function_name(param1, param2):\n    return " },
        { "label": "class with methods", "insert": "class ClassName:\n    def __init__(self, param):\n        self.param = param\n    \n    def method(self):\n        return self.param" },
        { "label": "decorator", "insert": "def decorator(func):\n    def wrapper(*args, **kwargs):\n        # Code before\n        result = func(*args, **kwargs)\n        # Code after\n        return result\n    return wrapper" },
        { "label": "main function", "insert": "def main():\n    pass\n\nif __name__ == \"__main__\":\n    main()" },
        { "label": "docstring", "insert": "\"\"\"\n    Description of function\n    \n    Args:\n        param: Description\n    \n    Returns:\n        Description\n    \"\"\"" },
        { "label": "assert", "insert": "assert , \"Error message\"" },
        { "label": "enumerate", "insert": "for index, item in enumerate():\n    " },
        { "label": "zip", "insert": "for item1, item2 in zip(list1, list2):\n    " },
        { "label": "f-string", "insert": "f\"{}\"" },
        { "label": "super()", "insert": "super().__init__()" },
        { "label": "input()", "insert": "input()" },
        { "label": "len()", "insert": "len()" },
        { "label": "str()", "insert": "str()" },
        { "label": "int()", "insert": "int()" },
        { "label": "float()", "insert": "float()" },
        { "label": "list()", "insert": "list()" },
        { "label": "dict()", "insert": "dict()" },
        { "label": "set()", "insert": "set()" },
        { "label": "tuple()", "insert": "tuple()" },
        { "label": "bool()", "insert": "bool()" },
        { "label": "type()", "insert": "type()" },
        { "label": "isinstance()", "insert": "isinstance(, )" },
        { "label": "hasattr()", "insert": "hasattr(, '')" },
        { "label": "getattr()", "insert": "getattr(, '', default)" },
        { "label": "setattr()", "insert": "setattr(, '', value)" },
        { "label": "delattr()", "insert": "delattr(, '')" },
        { "label": "dir()", "insert": "dir()" },
        { "label": "vars()", "insert": "vars()" },
        { "label": "id()", "insert": "id()" },
        { "label": "hash()", "insert": "hash()" },
        { "label": "abs()", "insert": "abs()" },
        { "label": "min()", "insert": "min()" },
        { "label": "max()", "insert": "max()" },
        { "label": "sum()", "insert": "sum()" },
        { "label": "round()", "insert": "round(, )" },
        { "label": "pow()", "insert": "pow(, )" },
        { "label": "divmod()", "insert": "divmod(, )" },
        { "label": "all()", "insert": "all()" },
        { "label": "any()", "insert": "any()" },
        { "label": "sorted()", "insert": "sorted()" },
        { "label": "reversed()", "insert": "reversed()" },
        { "label": "map()", "insert": "map(, )" },
        { "label": "filter()", "insert": "filter(, )" },
        { "label": "reduce()", "insert": "from functools import reduce\nreduce(, )" },
        { "label": "range()", "insert": "range()" },
        { "label": "slice()", "insert": "slice(, )" },
        { "label": "open()", "insert": "open('', '')" },
        { "label": "file read", "insert": "with open('', 'r') as f:\n    content = f.read()" },
        { "label": "file write", "insert": "with open('', 'w') as f:\n    f.write('')" },
        { "label": "file append", "insert": "with open('', 'a') as f:\n    f.write('')" },
        { "label": "json load", "insert": "import json\nwith open('', 'r') as f:\n    data = json.load(f)" },
        { "label": "json dump", "insert": "import json\nwith open('', 'w') as f:\n    json.dump(data, f)" },
        { "label": "json loads", "insert": "import json\ndata = json.loads()" },
        { "label": "json dumps", "insert": "import json\njson_string = json.dumps()" },
        { "label": "datetime now", "insert": "from datetime import datetime\nnow = datetime.now()" },
        { "label": "datetime strftime", "insert": "datetime.now().strftime('%Y-%m-%d %H:%M:%S')" },
        { "label": "datetime strptime", "insert": "datetime.strptime('', '%Y-%m-%d')" },
        { "label": "random choice", "insert": "import random\nrandom.choice()" },
        { "label": "random randint", "insert": "import random\nrandom.randint(, )" },
        { "label": "random random", "insert": "import random\nrandom.random()" },
        { "label": "random shuffle", "insert": "import random\nrandom.shuffle()" },
        { "label": "os path join", "insert": "import os\nos.path.join('', '')" },
        { "label": "os path exists", "insert": "import os\nos.path.exists('')" },
        { "label": "os listdir", "insert": "import os\nos.listdir('')" },
        { "label": "os makedirs", "insert": "import os\nos.makedirs('', exist_ok=True)" },
        { "label": "os remove", "insert": "import os\nos.remove('')" },
        { "label": "os rename", "insert": "import os\nos.rename('', '')" },
        { "label": "sys argv", "insert": "import sys\nsys.argv" },
        { "label": "sys exit", "insert": "import sys\nsys.exit()" },
        { "label": "sys path", "insert": "import sys\nsys.path.append('')" },
        { "label": "re search", "insert": "import re\nre.search(r'', )" },
        { "label": "re match", "insert": "import re\nre.match(r'', )" },
        { "label": "re findall", "insert": "import re\nre.findall(r'', )" },
        { "label": "re sub", "insert": "import re\nre.sub(r'', '', )" },
        { "label": "re split", "insert": "import re\nre.split(r'', )" },
        { "label": "urllib request", "insert": "from urllib.request import urlopen\nresponse = urlopen('')" },
        { "label": "requests get", "insert": "import requests\nresponse = requests.get('')" },
        { "label": "requests post", "insert": "import requests\nresponse = requests.post('', data={})" },
        { "label": "time sleep", "insert": "import time\ntime.sleep()" },
        { "label": "time time", "insert": "import time\ntime.time()" },
        { "label": "argparse", "insert": "import argparse\nparser = argparse.ArgumentParser()\nparser.add_argument('--arg', help='description')\nargs = parser.parse_args()" },
        { "label": "logging basic", "insert": "import logging\nlogging.basicConfig(level=logging.INFO)\nlogging.info('')" },
        { "label": "logging getLogger", "insert": "import logging\nlogger = logging.getLogger(__name__)" },
        { "label": "subprocess run", "insert": "import subprocess\nresult = subprocess.run([''], capture_output=True, text=True)" },
        { "label": "pathlib Path", "insert": "from pathlib import Path\npath = Path('')" },
        { "label": "csv reader", "insert": "import csv\nwith open('', 'r') as f:\n    reader = csv.reader(f)\n    for row in reader:\n        print(row)" },
        { "label": "csv writer", "insert": "import csv\nwith open('', 'w', newline='') as f:\n    writer = csv.writer(f)\n    writer.writerow([])" },
        { "label": "pickle dump", "insert": "import pickle\nwith open('', 'wb') as f:\n    pickle.dump(data, f)" },
        { "label": "pickle load", "insert": "import pickle\nwith open('', 'rb') as f:\n    data = pickle.load(f)" },
        { "label": "collections Counter", "insert": "from collections import Counter\ncounter = Counter()" },
        { "label": "collections defaultdict", "insert": "from collections import defaultdict\ndd = defaultdict()" },
        { "label": "collections deque", "insert": "from collections import deque\ndq = deque()" },
        { "label": "itertools combinations", "insert": "from itertools import combinations\ncombinations(, )" },
        { "label": "itertools permutations", "insert": "from itertools import permutations\npermutations()" },
        { "label": "itertools product", "insert": "from itertools import product\nproduct(, repeat=)" },
        { "label": "math sqrt", "insert": "import math\nmath.sqrt()" },
        { "label": "math ceil", "insert": "import math\nmath.ceil()" },
        { "label": "math floor", "insert": "import math\nmath.floor()" },
        { "label": "math pi", "insert": "import math\nmath.pi" },
        { "label": "math e", "insert": "import math\nmath.e" },
        { "label": "operator itemgetter", "insert": "from operator import itemgetter\nitemgetter()" },
        { "label": "operator attrgetter", "insert": "from operator import attrgetter\nattrgetter()" },
        { "label": "threading Thread", "insert": "import threading\nthread = threading.Thread(target=)\nthread.start()" },
        { "label": "multiprocessing Process", "insert": "from multiprocessing import Process\nprocess = Process(target=)\nprocess.start()" },
        { "label": "unittest TestCase", "insert": "import unittest\n\nclass TestCase(unittest.TestCase):\n    def test_example(self):\n        self.assertEqual(, )" },
        { "label": "pytest test", "insert": "def test_example():\n    assert  == " },
        { "label": "context manager", "insert": "class ContextManager:\n    def __enter__(self):\n        return self\n    \n    def __exit__(self, exc_type, exc_val, exc_tb):\n        pass" },
        { "label": "generator function", "insert": "def generator():\n    yield " },
        { "label": "property decorator", "insert": "@property\ndef property_name(self):\n    return self._value" },
        { "label": "setter decorator", "insert": "@property_name.setter\ndef property_name(self, value):\n    self._value = value" },
        { "label": "staticmethod", "insert": "@staticmethod\ndef static_method():\n    pass" },
        { "label": "classmethod", "insert": "@classmethod\ndef class_method(cls):\n    pass" },
        { "label": "dataclass", "insert": "from dataclasses import dataclass\n\n@dataclass\nclass DataClass:\n    field: str" },
        { "label": "namedtuple", "insert": "from collections import namedtuple\nPoint = namedtuple('Point', ['x', 'y'])" },
        { "label": "abstractmethod", "insert": "from abc import ABC, abstractmethod\n\nclass AbstractClass(ABC):\n    @abstractmethod\n    def abstract_method(self):\n        pass" },
        { "label": "exception handling", "insert": "try:\n    \nexcept ValueError as e:\n    print(f'ValueError: {e}')\nexcept Exception as e:\n    print(f'Exception: {e}')\nelse:\n    print('No exception')\nfinally:\n    print('Always executed')" },
        { "label": "custom exception", "insert": "class CustomException(Exception):\n    def __init__(self, message):\n        self.message = message\n        super().__init__(self.message)" },
        { "label": "raise exception", "insert": "raise Exception('')" },
        { "label": "global keyword", "insert": "global " },
        { "label": "nonlocal keyword", "insert": "nonlocal " },
        { "label": "pass statement", "insert": "pass" },
        { "label": "break statement", "insert": "break" },
        { "label": "continue statement", "insert": "continue" },
        { "label": "return statement", "insert": "return " },
        { "label": "yield statement", "insert": "yield " },
        { "label": "del statement", "insert": "del " },
        { "label": "exec function", "insert": "exec('')" },
        { "label": "eval function", "insert": "eval('')" },
        { "label": "compile function", "insert": "compile('', '', 'exec')" }
    ]
}
