{
    "html": [
        { "label": "html:5 (Boilerplate)", "insert": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>Document</title>\n</head>\n<body>\n    \n</body>\n</html>" },
        { "label": "div", "insert": "<div></div>" },
        { "label": "div.classname", "insert": "<div class=\"\"></div>" },
        { "label": "span", "insert": "<span></span>" },
        { "label": "p", "insert": "<p></p>" },
        { "label": "a (link)", "insert": "<a href=\"\"></a>" },
        { "label": "img", "insert": "<img src=\"\" alt=\"\">" },
        { "label": "h1", "insert": "<h1></h1>" },
        { "label": "h2", "insert": "<h2></h2>" },
        { "label": "h3", "insert": "<h3></h3>" },
        { "label": "ul", "insert": "<ul>\n    <li></li>\n</ul>" },
        { "label": "ol", "insert": "<ol>\n    <li></li>\n</ol>" },
        { "label": "li", "insert": "<li></li>" },
        { "label": "table", "insert": "<table>\n    <thead>\n        <tr>\n            <th></th>\n        </tr>\n    </thead>\n    <tbody>\n        <tr>\n            <td></td>\n        </tr>\n    </tbody>\n</table>" },
        { "label": "form", "insert": "<form action=\"\" method=\"get\"></form>" },
        { "label": "input:text", "insert": "<input type=\"text\" name=\"\" id=\"\">" },
        { "label": "input:email", "insert": "<input type=\"email\" name=\"\" id=\"\">" },
        { "label": "input:password", "insert": "<input type=\"password\" name=\"\" id=\"\">" },
        { "label": "input:checkbox", "insert": "<input type=\"checkbox\" name=\"\" id=\"\">" },
        { "label": "input:radio", "insert": "<input type=\"radio\" name=\"\" id=\"\">" },
        { "label": "input:submit", "insert": "<input type=\"submit\" value=\"\">" },
        { "label": "label", "insert": "<label for=\"\"></label>" },
        { "label": "textarea", "insert": "<textarea name=\"\" id=\"\" cols=\"30\" rows=\"10\"></textarea>" },
        { "label": "button", "insert": "<button></button>" },
        { "label": "select", "insert": "<select name=\"\" id=\"\">\n    <option value=\"\"></option>\n</select>" },
        { "label": "option", "insert": "<option value=\"\"></option>" },
        { "label": "header", "insert": "<header></header>" },
        { "label": "footer", "insert": "<footer></footer>" },
        { "label": "nav", "insert": "<nav></nav>" },
        { "label": "main", "insert": "<main></main>" },
        { "label": "section", "insert": "<section></section>" },
        { "label": "article", "insert": "<article></article>" },
        { "label": "aside", "insert": "<aside></aside>" },
        { "label": "link:css", "insert": "<link rel=\"stylesheet\" href=\"style.css\">" },
        { "label": "script:src", "insert": "<script src=\"\"></script>" }
    ],
    "js": [
        { "label": "log", "insert": "console.log();" },
        { "label": "const", "insert": "const " },
        { "label": "let", "insert": "let " },
        { "label": "var", "insert": "var " },
        { "label": "function", "insert": "function name(params) {\n    \n}" },
        { "label": "fn (arrow function)", "insert": "const name = (params) => {\n    \n}" },
        { "label": "if", "insert": "if (condition) {\n    \n}" },
        { "label": "ifelse", "insert": "if (condition) {\n    \n} else {\n    \n}" },
        { "label": "for", "insert": "for (let i = 0; i < array.length; i++) {\n    const element = array[i];\n    \n}" },
        { "label": "forEach", "insert": "array.forEach(element => {\n    \n});" },
        { "label": "map", "insert": "const newArray = array.map(element => {\n    \n});" },
        { "label": "filter", "insert": "const filteredArray = array.filter(element => {\n    \n});" },
        { "label": "reduce", "insert": "const result = array.reduce((accumulator, currentValue) => {\n    return accumulator + currentValue;\n}, 0);" },
        { "label": "docId", "insert": "document.getElementById('');" },
        { "label": "docQuery", "insert": "document.querySelector('');" },
        { "label": "docQueryAll", "insert": "document.querySelectorAll('');" },
        { "label": "addEvent", "insert": "element.addEventListener('', (event) => {\n    \n});" },
        { "label": "fetch", "insert": "fetch('url')\n    .then(response => response.json())\n    .then(data => {\n        console.log(data);\n    });" },
        { "label": "async", "insert": "async function name(params) {\n    \n}" },
        { "label": "await", "insert": "const result = await promise;" },
        { "label": "trycatch", "insert": "try {\n    \n} catch (error) {\n    console.error(error);\n}" },
        { "label": "class", "insert": "class MyClass {\n    constructor() {\n        \n    }\n}" },
        { "label": "setTimeout", "insert": "setTimeout(() => {\n    \n}, 1000);" },
        { "label": "setInterval", "insert": "setInterval(() => {\n    \n}, 1000);" },
        { "label": "promise", "insert": "const myPromise = new Promise((resolve, reject) => {\n    \n});" },
        { "label": "import", "insert": "import moduleName from 'module';" },
        { "label": "export", "insert": "export default " }
    ],
    "css": [
        { "label": "color", "insert": "color: ;" },
        { "label": "background-color", "insert": "background-color: ;" },
        { "label": "font-size", "insert": "font-size: 16px;" },
        { "label": "font-family", "insert": "font-family: Arial, sans-serif;" },
        { "label": "font-weight", "insert": "font-weight: ;" },
        { "label": "margin", "insert": "margin: ;" },
        { "label": "padding", "insert": "padding: ;" },
        { "label": "border", "insert": "border: 1px solid #000;" },
        { "label": "border-radius", "insert": "border-radius: ;" },
        { "label": "width", "insert": "width: ;" },
        { "label": "height", "insert": "height: ;" },
        { "label": "display: flex", "insert": "display: flex;" },
        { "label": "display: grid", "insert": "display: grid;" },
        { "label": "display: block", "insert": "display: block;" },
        { "label": "display: inline-block", "insert": "display: inline-block;" },
        { "label": "justify-content", "insert": "justify-content: center;" },
        { "label": "align-items", "insert": "align-items: center;" },
        { "label": "flex-direction", "insert": "flex-direction: row;" },
        { "label": "position: relative", "insert": "position: relative;" },
        { "label": "position: absolute", "insert": "position: absolute;" },
        { "label": "position: fixed", "insert": "position: fixed;" },
        { "label": "top", "insert": "top: ;" },
        { "label": "left", "insert": "left: ;" },
        { "label": "text-align", "insert": "text-align: center;" },
        { "label": "text-decoration", "insert": "text-decoration: none;" },
        { "label": "box-shadow", "insert": "box-shadow: 0 4px 8px rgba(0,0,0,0.1);" },
        { "label": "transition", "insert": "transition: all 0.3s ease;" },
        { "label": "transform", "insert": "transform: ;" },
        { "label": "media-query", "insert": "@media (max-width: 768px) {\n    \n}" },
        { "label": ":hover", "insert": ":hover {\n    \n}" }
    ],
    "py": [
        { "label": "def", "insert": "def function_name(params):\n    pass" },
        { "label": "class", "insert": "class ClassName:\n    def __init__(self):\n        pass" },
        { "label": "if __name__", "insert": "if __name__ == \"__main__\":\n    " },
        { "label": "print", "insert": "print()" },
        { "label": "for", "insert": "for item in iterable:\n    " },
        { "label": "for range", "insert": "for i in range():\n    " },
        { "label": "while", "insert": "while condition:\n    " },
        { "label": "if", "insert": "if condition:\n    " },
        { "label": "elif", "insert": "elif condition:\n    " },
        { "label": "else", "insert": "else:\n    " },
        { "label": "try-except", "insert": "try:\n    \nexcept Exception as e:\n    print(f\"An error occurred: {e}\")" },
        { "label": "try-except-finally", "insert": "try:\n    \nexcept Exception as e:\n    print(f\"An error occurred: {e}\")\nfinally:\n    " },
        { "label": "import", "insert": "import " },
        { "label": "from import", "insert": "from  import " },
        { "label": "with open (read)", "insert": "with open('file.txt', 'r') as f:\n    content = f.read()" },
        { "label": "with open (write)", "insert": "with open('file.txt', 'w') as f:\n    f.write('')" },
        { "label": "list comprehension", "insert": "[x for x in iterable]" },
        { "label": "dict comprehension", "insert": "{k:v for k, v in iterable}" },
        { "label": "lambda", "insert": "lambda arguments: expression" },
        { "label": "return", "insert": "return " },
        { "label": "import os", "insert": "import os" },
        { "label": "import sys", "insert": "import sys" },
        { "label": "import json", "insert": "import json" },
        { "label": "import requests", "insert": "import requests" },
        { "label": "import pandas as pd", "insert": "import pandas as pd" },
        { "label": "import numpy as np", "insert": "import numpy as np" }
    ]
}